import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'config_service.dart';

class MealService {
  static const String baseUrl = 'http://$apiIpAddress:5000/api/mealplan';

  /// Fetch the logged-in user's meal plan from MongoDB (generated by Spoonacular)
  static Future<Map<String, dynamic>> fetchUserMealPlan() async {
    final prefs = await SharedPreferences.getInstance();
    final userId = prefs.getString('user_id');

    if (userId == null) {
      throw Exception("User ID not found. Please log in again.");
    }

    final response = await http.get(Uri.parse('$baseUrl/$userId'));

    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 404) {
      throw Exception("No meal plan found for this user.");
    } else {
      throw Exception("Failed to fetch meal plan: ${response.body}");
    }
  }

  // --- âœ… NEW SERVICE METHOD ---
  /// Log a meal as consumed by sending a PATCH request
  static Future<Map<String, dynamic>> logMeal(int mealId) async {
    final prefs = await SharedPreferences.getInstance();
    final userId = prefs.getString('user_id');

    if (userId == null) {
      throw Exception("User ID not found. Cannot log meal.");
    }

    final response = await http.patch(
      Uri.parse('$baseUrl/log-meal'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, dynamic>{
        'userId': userId,
        'mealId': mealId,
      }),
    );

    if (response.statusCode == 200) {
      // Return the updated meal plan from the response
      return jsonDecode(response.body)['mealPlan'];
    } else {
      // If the server returns an error, throw an exception.
      final errorBody = jsonDecode(response.body);
      throw Exception(errorBody['message'] ?? 'Failed to log meal');
    }
  }
}
